<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:rabbit="http://www.springframework.org/schema/rabbit"
    xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-3.0.xsd
	http://www.springframework.org/schema/rabbit
    http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd">


	<!-- 配置整合mybatis过程 -->
	<!-- 1.配置数据库相关参数properties的属性：${url} -->
	<context:property-placeholder location="classpath:jdbc.properties,classpath:rabbitmq.properties" />

	<util:properties id="appConfig" location="classpath:rabbitmq.properties"></util:properties>
	<!-- RabbitMQ start -->
	<!-- 连接配置 -->
	<rabbit:connection-factory id="connectionFactory" host="${mq.host}" username="${mq.username}"
							   password="${mq.password}" port="${mq.port}"  />

	<rabbit:admin connection-factory="connectionFactory"/>

	<!-- 消息队列客户端 -->
	<rabbit:template id="amqpTemplate" exchange="${mq.queue}_exchange" connection-factory="connectionFactory"  />

	<!-- queue 队列声明 -->
	<!--
        durable 是否持久化
        exclusive 仅创建者可以使用的私有队列，断开后自动删除
        auto-delete 当所有消费端连接断开后，是否自动删除队列 -->
	<rabbit:queue id="test_queue" name="${mq.queue}_testQueue" durable="true" auto-delete="false" exclusive="false" />

	<!-- 交换机定义 -->
	<!--
        交换机：一个交换机可以绑定多个队列，一个队列也可以绑定到多个交换机上。
        如果没有队列绑定到交换机上，则发送到该交换机上的信息则会丢失。

        direct模式:消息与一个特定的路由器完全匹配，才会转发
        topic模式:按模式匹配
     -->
	<rabbit:topic-exchange name="${mq.queue}_exchange" durable="true" auto-delete="false">
		<rabbit:bindings>
			<!-- 设置消息Queue匹配的pattern (direct模式为key) -->
			<rabbit:binding queue="test_queue" pattern="${mq.queue}_patt"/>
		</rabbit:bindings>
	</rabbit:topic-exchange>

	<bean name="rabbitmqService" class="com.brh.cjf.service.impl.RabbitmqService"></bean>

	<!-- 配置监听 消费者 -->
	<rabbit:listener-container connection-factory="connectionFactory" acknowledge="auto">
		<!--
            queues 监听队列，多个用逗号分隔
            ref 监听器 -->
		<rabbit:listener queues="test_queue" method="onMessage" ref="rabbitmqService"/>
	</rabbit:listener-container>

	<!-- 2.数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 配置连接池属性 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- c3p0连接池的私有属性 -->
		<property name="maxPoolSize" value="30" />
		<property name="minPoolSize" value="10" />
		<!-- 关闭连接后不自动commit -->
		<property name="autoCommitOnClose" value="false" />
		<!-- 获取连接超时时间 -->
		<property name="checkoutTimeout" value="10000" />
		<!-- 当获取连接失败重试次数 -->
		<property name="acquireRetryAttempts" value="2" />
	</bean>

	<!-- 3.配置SqlSessionFactory对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 扫描entity包 使用别名 -->
		<property name="typeAliasesPackage" value="com.soecode.lyf.entity" />
		<!-- 扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml" />
	</bean>

	<!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 给出需要扫描Dao接口包 -->
		<property name="basePackage" value="com.soecode.lyf.dao" />
	</bean>
</beans>